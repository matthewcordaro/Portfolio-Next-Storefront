generator client {
  provider          = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("SUPABASE_DB_URL")
  directUrl         = env("SUPABASE_DIRECT_URL")
}

/// Represents a product available in the store, including its details such as name, description, price, and related attributes.
model Product {
  id                String      @id @default(uuid())
  name              String
  company           String
  description       String
  featured          Boolean
  image             String
  price             Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  clerkId           String
  favorites         Favorite[]
  reviews           Review []
  cartItems         CartItem[]
}

/// The `Favorite` model represents a user's favorite item or entity within the application.
/// It is used to store references to items that users have marked as favorites for quick access or personalization.
model Favorite {
  id                String      @id @default(uuid())
  clerkId           String
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

/// Represents a review left by a user for a product or service.
/// Contains details such as rating, comment, and references to related entities.
model Review{
  id                String      @id @default(uuid())
  clerkId           String
  rating            Int
  comment           String
  authorName        String
  authorImageUrl    String
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String
}

/// Represents a shopping cart containing products selected by a user.
/// Each cart is associated with a user and can hold multiple items.
/// Used to manage products before checkout.
model Cart {
  id                String      @id @default(uuid())
  clerkId           String
  cartItems         CartItem[]
  numItemsInCart    Int         @default(0)
  cartTotal         Int         @default(0)
  shipping          Int         @default(5)
  tax               Int         @default(0)
  taxRate           Float       @default(0.1)
  orderTotal        Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

/// Represents an item added to a user's shopping cart, including product details and quantity.
model CartItem {
  id                String      @id @default(uuid())
  product           Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId         String
  cart              Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId            String
  amount            Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

/// Represents an item that has been ordered as part of a purchase transaction.
/// Contains details about the product, quantity, and association with an order.
model OrderedItem {
  id                String          @id @default(uuid())
  productId         String
  amount            Int
  price             Int
  order             Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId           String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

/// Represents a customer's order, containing details such as purchased items, order status, and associated user information.
model Order {
  id                String          @id @default(uuid())
  clerkId           String
  numItems          Int             @default(0)
  orderTotal        Int             @default(0)
  subTotal          Int             @default(0)
  tax               Int             @default(0)
  shipping          Int             @default(0)
  email             String
  isPaid            Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  orderedItems      OrderedItem[]
}
